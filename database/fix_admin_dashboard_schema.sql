-- WECON Event Management System - Fix Admin Dashboard Schema Issues
-- Execute this in Supabase SQL Editor to fix the admin dashboard CRUD operations

-- =============================================
-- STEP 1: FIX EVENTS TABLE SCHEMA
-- =============================================

-- Add missing columns to events table
DO $$
BEGIN
    RAISE NOTICE 'Fixing events table schema...';
    
    -- Add chat_enabled column
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'events' AND column_name = 'chat_enabled') THEN
        ALTER TABLE events ADD COLUMN chat_enabled BOOLEAN DEFAULT true;
        RAISE NOTICE 'Added chat_enabled column to events table';
    END IF;
    
    -- Add qa_enabled column
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'events' AND column_name = 'qa_enabled') THEN
        ALTER TABLE events ADD COLUMN qa_enabled BOOLEAN DEFAULT true;
        RAISE NOTICE 'Added qa_enabled column to events table';
    END IF;
    
    -- Add networking_enabled column
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'events' AND column_name = 'networking_enabled') THEN
        ALTER TABLE events ADD COLUMN networking_enabled BOOLEAN DEFAULT true;
        RAISE NOTICE 'Added networking_enabled column to events table';
    END IF;
    
    -- Add virtual_enabled column
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'events' AND column_name = 'virtual_enabled') THEN
        ALTER TABLE events ADD COLUMN virtual_enabled BOOLEAN DEFAULT false;
        RAISE NOTICE 'Added virtual_enabled column to events table';
    END IF;
    
    -- Add current_attendees column
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'events' AND column_name = 'current_attendees') THEN
        ALTER TABLE events ADD COLUMN current_attendees INTEGER DEFAULT 0;
        RAISE NOTICE 'Added current_attendees column to events table';
    END IF;
    
    -- Add primary_color column
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'events' AND column_name = 'primary_color') THEN
        ALTER TABLE events ADD COLUMN primary_color TEXT DEFAULT '#764DF0';
        RAISE NOTICE 'Added primary_color column to events table';
    END IF;
    
    -- Add secondary_color column
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'events' AND column_name = 'secondary_color') THEN
        ALTER TABLE events ADD COLUMN secondary_color TEXT DEFAULT '#442490';
        RAISE NOTICE 'Added secondary_color column to events table';
    END IF;
    
    -- Add timezone column
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'events' AND column_name = 'timezone') THEN
        ALTER TABLE events ADD COLUMN timezone TEXT DEFAULT 'UTC';
        RAISE NOTICE 'Added timezone column to events table';
    END IF;
    
    -- Add start_date and end_date if they don't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'events' AND column_name = 'start_date') THEN
        ALTER TABLE events ADD COLUMN start_date TIMESTAMP WITH TIME ZONE;
        RAISE NOTICE 'Added start_date column to events table';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'events' AND column_name = 'end_date') THEN
        ALTER TABLE events ADD COLUMN end_date TIMESTAMP WITH TIME ZONE;
        RAISE NOTICE 'Added end_date column to events table';
    END IF;
    
    RAISE NOTICE 'Events table schema fixed successfully';
END $$;

-- =============================================
-- STEP 2: CREATE TICKET_TIERS TABLE
-- =============================================

DO $$
BEGIN
    RAISE NOTICE 'Creating ticket_tiers table...';
    
    CREATE TABLE IF NOT EXISTS ticket_tiers (
        id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        event_id BIGINT REFERENCES events(id) ON DELETE CASCADE,
        name TEXT NOT NULL,
        description TEXT,
        price DECIMAL(10,2) NOT NULL DEFAULT 0,
        currency TEXT DEFAULT 'USD',
        quantity_total INTEGER,
        quantity_sold INTEGER DEFAULT 0,
        quantity_available INTEGER GENERATED ALWAYS AS (quantity_total - quantity_sold) STORED,
        sale_start_date TIMESTAMP WITH TIME ZONE,
        sale_end_date TIMESTAMP WITH TIME ZONE,
        is_active BOOLEAN DEFAULT true,
        is_visible BOOLEAN DEFAULT true,
        sort_order INTEGER DEFAULT 0,
        tier_type TEXT DEFAULT 'STANDARD' CHECK (tier_type IN ('EARLY_BIRD', 'STANDARD', 'VIP', 'STUDENT', 'GROUP')),
        features JSONB DEFAULT '[]',
        restrictions JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Create indexes for better performance
    CREATE INDEX IF NOT EXISTS idx_ticket_tiers_event_id ON ticket_tiers(event_id);
    CREATE INDEX IF NOT EXISTS idx_ticket_tiers_active ON ticket_tiers(is_active, is_visible);
    
    RAISE NOTICE 'Ticket_tiers table created successfully';
END $$;

-- =============================================
-- STEP 3: CREATE ADMIN_TASKS TABLE
-- =============================================

DO $$
BEGIN
    RAISE NOTICE 'Updating admin_tasks table...';
    
    -- Check if admin_tasks table exists, if not create it
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'admin_tasks') THEN
        CREATE TABLE admin_tasks (
            id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            title TEXT NOT NULL,
            description TEXT,
            status TEXT DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED')),
            priority TEXT DEFAULT 'MEDIUM' CHECK (priority IN ('LOW', 'MEDIUM', 'HIGH', 'URGENT')),
            assigned_to UUID REFERENCES users(id),
            created_by UUID REFERENCES users(id),
            event_id BIGINT REFERENCES events(id) ON DELETE CASCADE,
            due_date TIMESTAMP WITH TIME ZONE,
            completed_at TIMESTAMP WITH TIME ZONE,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        CREATE INDEX IF NOT EXISTS idx_admin_tasks_status ON admin_tasks(status);
        CREATE INDEX IF NOT EXISTS idx_admin_tasks_assigned_to ON admin_tasks(assigned_to);
        CREATE INDEX IF NOT EXISTS idx_admin_tasks_event_id ON admin_tasks(event_id);
        
        RAISE NOTICE 'Admin_tasks table created successfully';
    ELSE
        RAISE NOTICE 'Admin_tasks table already exists';
    END IF;
END $$;

-- =============================================
-- STEP 4: CREATE DIGITAL_SIGNAGE TABLE
-- =============================================

DO $$
BEGIN
    RAISE NOTICE 'Updating digital_signage table...';
    
    -- Check if digital_signage table exists, if not create it
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'digital_signage') THEN
        CREATE TABLE digital_signage (
            id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            name TEXT NOT NULL,
            content_type TEXT DEFAULT 'TEXT' CHECK (content_type IN ('TEXT', 'IMAGE', 'VIDEO', 'HTML', 'URL')),
            content_data JSONB NOT NULL,
            display_locations TEXT[] DEFAULT '{}',
            start_time TIMESTAMP WITH TIME ZONE,
            end_time TIMESTAMP WITH TIME ZONE,
            active BOOLEAN DEFAULT true,
            priority INTEGER DEFAULT 1,
            event_id BIGINT REFERENCES events(id) ON DELETE CASCADE,
            created_by UUID REFERENCES users(id),
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        CREATE INDEX IF NOT EXISTS idx_digital_signage_active ON digital_signage(active);
        CREATE INDEX IF NOT EXISTS idx_digital_signage_event_id ON digital_signage(event_id);
        CREATE INDEX IF NOT EXISTS idx_digital_signage_times ON digital_signage(start_time, end_time);
        
        RAISE NOTICE 'Digital_signage table created successfully';
    ELSE
        RAISE NOTICE 'Digital_signage table already exists';
    END IF;
END $$;

-- =============================================
-- STEP 5: CREATE SAMPLE DATA FOR TESTING
-- =============================================

DO $$
BEGIN
    RAISE NOTICE 'Creating sample data for testing...';
    
    -- Insert sample event if none exist
    IF NOT EXISTS (SELECT 1 FROM events LIMIT 1) THEN
        INSERT INTO events (
            name, 
            slug, 
            description, 
            timezone, 
            start_date, 
            end_date, 
            status,
            primary_color,
            secondary_color,
            current_attendees,
            networking_enabled,
            qa_enabled,
            chat_enabled,
            virtual_enabled
        ) VALUES (
            'WECON Masawat 2024',
            'wecon-masawat-2024',
            'The premier technology and innovation conference in the region',
            'Asia/Karachi',
            NOW() + INTERVAL '30 days',
            NOW() + INTERVAL '32 days',
            'PUBLISHED',
            '#764DF0',
            '#442490',
            0,
            true,
            true,
            true,
            false
        );
        
        RAISE NOTICE 'Sample event created';
    END IF;
    
    -- Insert sample ticket tiers
    IF NOT EXISTS (SELECT 1 FROM ticket_tiers LIMIT 1) THEN
        INSERT INTO ticket_tiers (event_id, name, description, price, quantity_total, tier_type) 
        SELECT 
            e.id,
            'Early Bird',
            'Limited time early bird pricing',
            99.00,
            100,
            'EARLY_BIRD'
        FROM events e 
        WHERE e.slug = 'wecon-masawat-2024'
        LIMIT 1;
        
        INSERT INTO ticket_tiers (event_id, name, description, price, quantity_total, tier_type) 
        SELECT 
            e.id,
            'Standard',
            'Regular conference ticket',
            149.00,
            500,
            'STANDARD'
        FROM events e 
        WHERE e.slug = 'wecon-masawat-2024'
        LIMIT 1;
        
        INSERT INTO ticket_tiers (event_id, name, description, price, quantity_total, tier_type) 
        SELECT 
            e.id,
            'VIP',
            'VIP access with exclusive perks',
            299.00,
            50,
            'VIP'
        FROM events e 
        WHERE e.slug = 'wecon-masawat-2024'
        LIMIT 1;
        
        RAISE NOTICE 'Sample ticket tiers created';
    END IF;
    
END $$;

-- =============================================
-- STEP 6: VERIFICATION
-- =============================================

-- Verify the schema fixes
SELECT 'Schema fixes completed successfully' as status;

-- Show events table structure
SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'events' 
ORDER BY ordinal_position;

-- Show ticket_tiers table structure
SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'ticket_tiers' 
ORDER BY ordinal_position;

-- Show sample data counts
SELECT 
    'events' as table_name, 
    COUNT(*) as record_count 
FROM events
UNION ALL
SELECT 
    'ticket_tiers' as table_name, 
    COUNT(*) as record_count 
FROM ticket_tiers
UNION ALL
SELECT 
    'users' as table_name, 
    COUNT(*) as record_count 
FROM users;
