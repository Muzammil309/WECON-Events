generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String   @id @default(cuid())
  name              String
  email             String   @unique
  password          String
  role              UserRole @default(ATTENDEE)
  emailVerified     Boolean  @default(false)
  verificationToken String?
  emailUpdates      Boolean  @default(false)
  phone             String?
  bio               String?
  avatarUrl         String?
  company           String?
  jobTitle          String?
  linkedinUrl       String?
  twitterUrl        String?
  website           String?
  isActive          Boolean  @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  managedEvents     Event[]  @relation("EventManager")
  assignedTasks     Task[]   @relation("TaskAssignee")
  createdTasks      Task[]   @relation("TaskCreator")
  staffShifts       StaffShift[]
  notifications     Notification[]
  feedbackGiven     Feedback[] @relation("FeedbackGiver")
  orders            Order[]
  exhibitorProfile  ExhibitorProfile?
  speakerProfile    SpeakerProfile?
  attendeeProfile   AttendeeProfile?
  sessionBookmarks  SessionBookmark[]
  connectionRequests Connection[] @relation("ConnectionRequester")
  connectionReceived Connection[] @relation("ConnectionRecipient")
  checkIns          CheckIn[]
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  STAFF_MANAGER
  SPONSOR_MANAGER
  ORGANIZER
  STAFF
  VOLUNTEER
  SPEAKER
  EXHIBITOR
  ATTENDEE
}

enum EventStatus {
  DRAFT
  PUBLISHED
  LIVE
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
  REMINDER
}

enum ShiftStatus {
  SCHEDULED
  CHECKED_IN
  CHECKED_OUT
  ABSENT
  CANCELLED
}

model Event {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  venue       String?
  startAt     DateTime
  endAt       DateTime
  timezone    String   @default("UTC")
  status      EventStatus @default(DRAFT)
  maxAttendees Int?
  category    String?
  tags        String? // JSON array as string
  website     String?
  contactEmail String?
  logoUrl     String?
  bannerUrl   String?
  isPublic    Boolean  @default(true)
  registrationOpen Boolean @default(true)
  registrationDeadline DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  manager     User     @relation("EventManager", fields: [managerId], references: [id])
  managerId   String
  tickets     TicketType[]
  sessions    Session[]
  rooms       Room[]
  venues      Venue[]
  submissions Submission[]
  orders      Order[]
  resources   Resource[]
  tasks       Task[]
  staff       StaffShift[]
  sponsors    Sponsor[]
  exhibitors  ExhibitorProfile[]
  analytics   EventAnalytics[]
}

model TicketType {
  id            String   @id @default(cuid())
  event         Event    @relation(fields: [eventId], references: [id])
  eventId       String
  name          String
  description   String?
  priceCents    Int      @default(0)
  currency      String   @default("USD")
  quantityTotal Int
  quantitySold  Int      @default(0)
  salesStart    DateTime
  salesEnd      DateTime
  tickets       Ticket[]
}

model Order {
  id         String   @id @default(cuid())
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  buyerName  String
  buyerEmail String
  totalCents Int
  status     OrderStatus @default(PENDING)
  createdAt  DateTime @default(now())
  tickets    Ticket[]
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

model Ticket {
  id           String   @id @default(cuid())
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      String
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId String
  attendeeName  String
  attendeeEmail String
  qrCode       String   @unique
  status       TicketStatus @default(VALID)
  checkedInAt  DateTime?
  checkIns     CheckInLog[]
}

enum TicketStatus {
  VALID
  USED
  CANCELLED
}

model CheckInLog {
  id        String   @id @default(cuid())
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  scannedAt DateTime @default(now())
  scanner   String?
}

model Room {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  venue     Venue?   @relation(fields: [venueId], references: [id])
  venueId   String?
  name      String
  capacity  Int?
  location  String?
  equipment String? // JSON array as string
  isAccessible Boolean @default(false)
  sessions  Session[]
  checkIns  CheckIn[]
}

// Speaker model replaced by SpeakerProfile linked to User

model Session {
  id          String   @id @default(cuid())
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
  title       String
  abstract    String?
  track       String?
  startAt     DateTime
  endAt       DateTime
  room        Room?    @relation(fields: [roomId], references: [id])
  roomId      String?
  speakers    SessionSpeaker[]
  resources   Resource[]
  feedback    Feedback[]
  bookmarks   SessionBookmark[]
  checkIns    CheckIn[]
}

model SessionSpeaker {
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String
  speaker   SpeakerProfile @relation(fields: [speakerId], references: [id])
  speakerId String

  @@id([sessionId, speakerId])
}

model Submission {
  id         String   @id @default(cuid())
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
  title      String
  abstract   String
  speakerName String
  email      String
  status     SubmissionStatus @default(SUBMITTED)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum SubmissionStatus {
  SUBMITTED
  ACCEPTED
  REJECTED
}

model Resource {
  id        String   @id @default(cuid())
  session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?
  title     String
  url       String
  createdAt DateTime @default(now())
}

model Feedback {
  id        String   @id @default(cuid())
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId String
  rating    Int
  comment   String?
  attendeeEmail String?
  giver     User?    @relation("FeedbackGiver", fields: [giverId], references: [id])
  giverId   String?
  createdAt DateTime @default(now())
}

// New comprehensive models for enhanced functionality

model AttendeeProfile {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  interests       String? // JSON array as string
  dietaryReqs     String?
  accessibilityReqs String?
  emergencyContact String?
  tshirtSize      String?
  networkingOptIn Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SpeakerProfile {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  bio             String?
  expertise       String? // JSON array as string
  speakingTopics  String? // JSON array as string
  pastEvents      String? // JSON array as string
  socialLinks     Json?
  availableForNetworking Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  sessions        SessionSpeaker[]
}

model ExhibitorProfile {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  event           Event    @relation(fields: [eventId], references: [id])
  eventId         String
  companyName     String
  companyDescription String?
  logoUrl         String?
  website         String?
  products        String? // JSON array as string
  stallNumber     String?
  stallSize       String?
  setupRequirements String?
  contactPerson   String
  contactPhone    String
  contactEmail    String
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  stall           Stall?
}

model Venue {
  id          String   @id @default(cuid())
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
  name        String
  address     String?
  description String?
  capacity    Int?
  facilities  String? // JSON array as string
  mapUrl      String?
  coordinates Json?
  isAccessible Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rooms       Room[]
  stalls      Stall[]
  checkIns    CheckIn[]
}

model Stall {
  id              String   @id @default(cuid())
  venue           Venue    @relation(fields: [venueId], references: [id])
  venueId         String
  exhibitor       ExhibitorProfile? @relation(fields: [exhibitorId], references: [id])
  exhibitorId     String?  @unique
  stallNumber     String
  size            String
  location        String?
  powerOutlets    Int      @default(0)
  internetAccess  Boolean  @default(false)
  setupTime       DateTime?
  teardownTime    DateTime?
  isBooked        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Task {
  id          String     @id @default(cuid())
  event       Event      @relation(fields: [eventId], references: [id])
  eventId     String
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  estimatedHours Int?
  actualHours    Int?
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  creator     User       @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId   String
  tags        String? // JSON array as string
  dependencies String?  // JSON array of task IDs this task depends on
  attachments String?   // JSON array of file URLs
  comments    TaskComment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model TaskComment {
  id        String   @id @default(cuid())
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  content   String
  authorId  String
  createdAt DateTime @default(now())
}

model StaffShift {
  id        String      @id @default(cuid())
  event     Event       @relation(fields: [eventId], references: [id])
  eventId   String
  staff     User        @relation(fields: [staffId], references: [id])
  staffId   String
  role      String
  startTime DateTime
  endTime   DateTime
  status    ShiftStatus @default(SCHEDULED)
  checkInTime  DateTime?
  checkOutTime DateTime?
  location  String?
  notes     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  actionUrl String?
  metadata  Json?
  createdAt DateTime         @default(now())
}

model Sponsor {
  id          String   @id @default(cuid())
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
  name        String
  tier        String   // Gold, Silver, Bronze, etc.
  logoUrl     String?
  website     String?
  description String?
  contactName String
  contactEmail String
  contactPhone String?
  benefits    String? // JSON array of sponsorship benefits
  amount      Float?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EventAnalytics {
  id              String   @id @default(cuid())
  event           Event    @relation(fields: [eventId], references: [id])
  eventId         String
  date            DateTime @default(now())
  totalRegistrations Int   @default(0)
  totalCheckIns   Int      @default(0)
  totalSessions   Int      @default(0)
  totalFeedback   Int      @default(0)
  avgRating       Float?
  revenue         Float    @default(0)
  expenses        Float    @default(0)
  metadata        Json?    // Additional analytics data
  createdAt       DateTime @default(now())
}

model SessionBookmark {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String
  createdAt DateTime @default(now())

  @@id([userId, sessionId])
}

model Connection {
  id          String   @id @default(cuid())
  requester   User     @relation("ConnectionRequester", fields: [requesterId], references: [id])
  requesterId String
  recipient   User     @relation("ConnectionRecipient", fields: [recipientId], references: [id])
  recipientId String
  status      String   @default("pending") // pending, accepted, declined
  message     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([requesterId, recipientId])
}

model CheckIn {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?
  venue     Venue?   @relation(fields: [venueId], references: [id])
  venueId   String?
  room      Room?    @relation(fields: [roomId], references: [id])
  roomId    String?
  type      String   // session, venue, room, event
  checkInAt DateTime @default(now())
  checkOutAt DateTime?
  metadata  Json?    // Additional check-in data
}
